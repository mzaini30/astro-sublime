# [PackageDev] target_format: plist, ext: tmLanguage
name: Astro Markdown
scopeName: text.html.markdown.astro

patterns:
- include: '#block'

- include: '#astro-expressions'

repository:
  ampersand:
    comment: Markdown will convert this for us. We match it so that the HTML grammar
      will not mark it up as invalid.
    name: meta.other.valid-ampersand.markdown
    match: '&(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)'

  astro-expressions:
    patterns:
    - name: expression.embbeded.astro
      begin: (\{)
      beginCaptures:
        '1': {name: punctuation.definition.raw.markdown}
      end: (\})
      endCaptures:
        '1': {name: punctuation.definition.raw.markdown}
      patterns:
      - include: source.tsx

  block:
    patterns:
    - include: '#separator'
    - include: '#heading'
    - include: '#blockquote'
    - include: '#lists'
    - include: '#fenced_code_block'
    - include: '#link-def'
    - include: '#html'
    - include: '#paragraph'
    - include: '#astro-expressions'

  blockquote:
    name: markup.quote.markdown
    begin: (^|\G)\s*(>) ?
    captures:
      '2': {name: punctuation.definition.quote.begin.markdown}
    patterns:
    - include: '#block'
    while: (^|\G)\s*(>) ?

  bold:
    name: markup.bold.markdown
    begin: |-
      (?x) (?<open>(\*\*(?=\w)|(?<!\w)\*\*|(?<!\w)\b__))(?=\S) (?=
        (
          <[^>]*+>              # HTML tags
          | (?<raw>`+)([^`]|(?!(?<!`)\k<raw>(?!`))`)*+\k<raw>
                            # Raw
          | \\[\\`*_{}\[\]()#.!+\->]?+      # Escapes
          | \[
          (
              (?<square>          # Named group
                [^\[\]\\]        # Match most chars
                | \\.            # Escaped chars
                | \[ \g<square>*+ \]    # Nested brackets
              )*+
            \]
            (
              (              # Reference Link
                [ ]?          # Optional space
                \[[^\]]*+\]        # Ref name
              )
              | (              # Inline Link
                \(            # Opening paren
                  [ \t]*+        # Optional whitespace
                  <?(.*?)>?      # URL
                  [ \t]*+        # Optional whitespace
                  (          # Optional Title
                    (?<title>['"])
                    (.*?)
                    \k<title>
                  )?
                \)
              )
            )
          )
          | (?!(?<=\S)\k<open>).            # Everything besides
                            # style closer
        )++
        (?<=\S)(?=__\b|\*\*)\k<open>                # Close
      )
    end: (?<=\S)(\1)
    captures:
      '1': {name: punctuation.definition.bold.markdown}
    patterns:
    - begin: (?=<[^>]*?>)
      end: (?<=>)
      patterns:
      - include: text.html.astro
      applyEndPatternLast: 1
    - include: '#escape'
    - include: '#ampersand'
    - include: '#bracket'
    - include: '#raw'
    - include: '#bold'
    - include: '#italic'
    - include: '#image-inline'
    - include: '#link-inline'
    - include: '#link-inet'
    - include: '#link-email'
    - include: '#image-ref'
    - include: '#link-ref-literal'
    - include: '#link-ref'
    - include: '#link-ref-shortcut'

  bracket:
    comment: Markdown will convert this for us. We match it so that the HTML grammar
      will not mark it up as invalid.
    name: meta.other.valid-bracket.markdown
    match: <(?![a-zA-Z/?\$!])

  escape:
    name: constant.character.escape.markdown
    match: \\[-`*_#+.!(){}\[\]\\>]

  fenced_code_block:
    patterns:
    - include: '#fenced_code_block_css'
    - include: '#fenced_code_block_astro'
    - include: '#fenced_code_block_basic'
    - include: '#fenced_code_block_ini'
    - include: '#fenced_code_block_java'
    - include: '#fenced_code_block_lua'
    - include: '#fenced_code_block_makefile'
    - include: '#fenced_code_block_perl'
    - include: '#fenced_code_block_r'
    - include: '#fenced_code_block_ruby'
    - include: '#fenced_code_block_php'
    - include: '#fenced_code_block_sql'
    - include: '#fenced_code_block_vs_net'
    - include: '#fenced_code_block_xml'
    - include: '#fenced_code_block_xsl'
    - include: '#fenced_code_block_yaml'
    - include: '#fenced_code_block_dosbatch'
    - include: '#fenced_code_block_clojure'
    - include: '#fenced_code_block_coffee'
    - include: '#fenced_code_block_c'
    - include: '#fenced_code_block_cpp'
    - include: '#fenced_code_block_diff'
    - include: '#fenced_code_block_dockerfile'
    - include: '#fenced_code_block_git_commit'
    - include: '#fenced_code_block_git_rebase'
    - include: '#fenced_code_block_go'
    - include: '#fenced_code_block_groovy'
    - include: '#fenced_code_block_pug'
    - include: '#fenced_code_block_js'
    - include: '#fenced_code_block_js_regexp'
    - include: '#fenced_code_block_json'
    - include: '#fenced_code_block_jsonc'
    - include: '#fenced_code_block_less'
    - include: '#fenced_code_block_objc'
    - include: '#fenced_code_block_swift'
    - include: '#fenced_code_block_scss'
    - include: '#fenced_code_block_perl6'
    - include: '#fenced_code_block_powershell'
    - include: '#fenced_code_block_python'
    - include: '#fenced_code_block_regexp_python'
    - include: '#fenced_code_block_rust'
    - include: '#fenced_code_block_scala'
    - include: '#fenced_code_block_shell'
    - include: '#fenced_code_block_ts'
    - include: '#fenced_code_block_tsx'
    - include: '#fenced_code_block_csharp'
    - include: '#fenced_code_block_fsharp'
    - include: '#fenced_code_block_dart'
    - include: '#fenced_code_block_handlebars'
    - include: '#fenced_code_block_markdown'
    - include: '#fenced_code_block_log'
    - include: '#fenced_code_block_erlang'
    - include: '#fenced_code_block_elixir'
    - include: '#fenced_code_block_unknown'

  fenced_code_block_astro:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(astro)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s*)(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.astro
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: text.html.astro
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_basic:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(html|htm|shtml|xhtml|inc|tmpl|tpl)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.html
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: text.html.basic
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_c:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(c|h)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.c
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.c
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_clojure:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(clj|cljs|clojure)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.clojure
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.clojure
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_coffee:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(coffee|Cakefile|coffee.erb)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.coffee
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.coffee
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_cpp:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(cpp|c\+\+|cxx)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.cpp source.cpp
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.cpp
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_csharp:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(cs|csharp|c#)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.csharp
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.cs
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_css:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(css|css.erb)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.css
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.css
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_dart:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(dart)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.dart
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.dart
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_diff:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(patch|diff|rej)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.diff
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.diff
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_dockerfile:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(dockerfile|Dockerfile)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.dockerfile
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.dockerfile
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_dosbatch:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(bat|batch)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.dosbatch
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.batchfile
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_elixir:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(elixir)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.elixir
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.elixir
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_erlang:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(erlang)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.erlang
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.erlang
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_fsharp:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(fs|fsharp|f#)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.fsharp
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.fsharp
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_git_commit:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(COMMIT_EDITMSG|MERGE_MSG)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.git_commit
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: text.git-commit
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_git_rebase:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(git-rebase-todo)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.git_rebase
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: text.git-rebase
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_go:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(go|golang)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.go
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.go
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_groovy:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(groovy|gvy)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.groovy
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.groovy
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_handlebars:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(handlebars|hbs)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.handlebars
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: text.html.handlebars
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_ini:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(ini|conf)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.ini
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.ini
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_java:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(java|bsh)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.java
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.java
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_js:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(js|jsx|javascript|es6|mjs|cjs|\{\.js.+?\})((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.javascript
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.js
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_js_regexp:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(regexp)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.js_regexp
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.js.regexp
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_json:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(json|json5|sublime-settings|sublime-menu|sublime-keymap|sublime-mousemap|sublime-theme|sublime-build|sublime-project|sublime-completions)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.json
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.json
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_jsonc:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(jsonc)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.jsonc
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.json.comments
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_less:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(less)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.less
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.css.less
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_log:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(log)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.log
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: text.log
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_lua:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(lua)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.lua
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.lua
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_makefile:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(Makefile|makefile|GNUmakefile|OCamlMakefile)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.makefile
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.makefile
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_markdown:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(markdown|md)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.markdown
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: text.html.markdown
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_objc:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(objectivec|objective-c|mm|objc|obj-c|m|h)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.objc
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.objc
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_perl:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(perl|pl|pm|pod|t|PL|psgi|vcl)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.perl
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.perl
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_perl6:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(perl6|p6|pl6|pm6|nqp)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.perl6
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.perl.6
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_php:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(php|php3|php4|php5|phpt|phtml|aw|ctp)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.php
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: text.html.basic
      - include: source.php
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_powershell:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(powershell|ps1|psm1|psd1)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.powershell
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.powershell
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_pug:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(jade|pug)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.pug
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: text.pug
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_python:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(python|py|py3|rpy|pyw|cpy|SConstruct|Sconstruct|sconstruct|SConscript|gyp|gypi|\{\.python.+?\})((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.python
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.python
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_r:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(R|r|s|S|Rprofile|\{\.r.+?\})((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.r
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.r
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_regexp_python:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(re)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.regexp_python
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.regexp.python
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_ruby:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(ruby|rb|rbx|rjs|Rakefile|rake|cgi|fcgi|gemspec|irbrc|Capfile|ru|prawn|Cheffile|Gemfile|Guardfile|Hobofile|Vagrantfile|Appraisals|Rantfile|Berksfile|Berksfile.lock|Thorfile|Puppetfile)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.ruby
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.ruby
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_rust:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(rust|rs|\{\.rust.+?\})((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.rust
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.rust
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_scala:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(scala|sbt)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.scala
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.scala
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_scss:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(scss)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.scss
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.css.scss
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_shell:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(shell|sh|bash|zsh|bashrc|bash_profile|bash_login|profile|bash_logout|.textmate_init|\{\.bash.+?\})((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.shellscript
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.shell
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_sql:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(sql|ddl|dml)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.sql
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.sql
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_swift:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(swift)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.swift
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.swift
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_ts:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(typescript|ts)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.typescript
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.ts
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_tsx:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(tsx)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.typescriptreact
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.tsx
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_unknown:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?=([^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}

  fenced_code_block_vs_net:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(vb)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.vs_net
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.asp.vb.net
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_xml:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(xml|xsd|tld|jsp|pt|cpt|dtml|rss|opml)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.xml
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: text.xml
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_xsl:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(xsl|xslt)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.xsl
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: text.xml.xsl
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  fenced_code_block_yaml:
    name: markup.fenced_code.block.markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\s*(?i:(yaml|yml)((\s+|:|\{)[^`~]*)?$)
    beginCaptures:
      '3': {name: punctuation.definition.markdown}
      '4': {name: fenced_code.block.language.markdown}
      '5': {name: fenced_code.block.language.attributes.markdown}
    end: (^|\G)(\2|\s{0,})(\3)\s*$
    endCaptures:
      '3': {name: punctuation.definition.markdown}
    patterns:
    - contentName: meta.embedded.block.yaml
      begin: (^|\G)(\s*)(.*)
      patterns:
      - include: source.yaml
      while: (^|\G)(?!\s*([`~]{3,})\s*$)

  heading:
    name: markup.heading.markdown
    match: (?:^|\G)\s*(#{1,6}\s+(.*?)(\s+#{1,6})?\s*)$
    captures:
      '1':
        patterns:
        - name: heading.6.markdown
          match: (#{6})\s+(.*?)(?:\s+(#+))?\s*$
          captures:
            '1': {name: punctuation.definition.heading.markdown}
            '2':
              name: entity.name.section.markdown
              patterns:
              - include: '#inline'
              - include: text.html.astro
            '3': {name: punctuation.definition.heading.markdown}
        - name: heading.5.markdown
          match: (#{5})\s+(.*?)(?:\s+(#+))?\s*$
          captures:
            '1': {name: punctuation.definition.heading.markdown}
            '2':
              name: entity.name.section.markdown
              patterns:
              - include: '#inline'
              - include: text.html.astro
            '3': {name: punctuation.definition.heading.markdown}
        - name: heading.4.markdown
          match: (#{4})\s+(.*?)(?:\s+(#+))?\s*$
          captures:
            '1': {name: punctuation.definition.heading.markdown}
            '2':
              name: entity.name.section.markdown
              patterns:
              - include: '#inline'
              - include: text.html.astro
            '3': {name: punctuation.definition.heading.markdown}
        - name: heading.3.markdown
          match: (#{3})\s+(.*?)(?:\s+(#+))?\s*$
          captures:
            '1': {name: punctuation.definition.heading.markdown}
            '2':
              name: entity.name.section.markdown
              patterns:
              - include: '#inline'
              - include: text.html.astro
            '3': {name: punctuation.definition.heading.markdown}
        - name: heading.2.markdown
          match: (#{2})\s+(.*?)(?:\s+(#+))?\s*$
          captures:
            '1': {name: punctuation.definition.heading.markdown}
            '2':
              name: entity.name.section.markdown
              patterns:
              - include: '#inline'
              - include: text.html.astro
            '3': {name: punctuation.definition.heading.markdown}
        - name: heading.1.markdown
          match: (#{1})\s+(.*?)(?:\s+(#+))?\s*$
          captures:
            '1': {name: punctuation.definition.heading.markdown}
            '2':
              name: entity.name.section.markdown
              patterns:
              - include: '#inline'
              - include: text.html.astro
            '3': {name: punctuation.definition.heading.markdown}
    patterns:
    - include: '#inline'

  heading-setext:
    patterns:
    - name: markup.heading.setext.1.markdown
      match: ^(={3,})(?=[ \t]*$\n?)
    - name: markup.heading.setext.2.markdown
      match: ^(-{3,})(?=[ \t]*$\n?)

  html:
    patterns:
    - name: comment.block.html
      begin: (^|\G)\s*(<!--)
      end: (-->)
      captures:
        '1': {name: punctuation.definition.comment.html}
        '2': {name: punctuation.definition.comment.html}
    - begin: (?i)(?=</?[a-zA-Z]+[^\s/&gt;]*(\s|$|/?>))
      patterns:
      - include: text.html.astro
      while: (?i)^(?!.*</(\1||\2)>)
    - begin: (?=(<[a-zA-Z0-9\-](/?>|\s.*?>)|</[a-zA-Z0-9\-]>)\s*$)
      patterns:
      - include: text.html.astro
      while: (?i)^(?!.*</(\1||\2)>)

  image-inline:
    name: meta.image.inline.markdown
    match: "(?x)\n(\\!\\[)((?<square>[^\\[\\]\\\\]|\\\\.|\\[\\g<square>*+\\])*+)(\\\
      ])\n              # Match the link text.\n(\\()            # Opening paren for\
      \ url\n  (<?)(\\S+?)(>?)      # The url\n  [ \\t]*          # Optional whitespace\n\
      \  (?:\n      ((\\().+?(\\)))    # Match title in parens\u2026\n    | ((\").+?(\"\
      ))    # or in double quotes\u2026\n    | ((').+?('))    # or in single quotes.\n\
      \  )?            # Title is optional\n  \\s*            # Optional whitespace\n\
      (\\))"
    captures:
      '1': {name: punctuation.definition.string.begin.markdown}
      '2': {name: string.other.link.description.markdown}
      '4': {name: punctuation.definition.string.end.markdown}
      '5': {name: punctuation.definition.metadata.markdown}
      '6': {name: punctuation.definition.link.markdown}
      '7': {name: markup.underline.link.image.markdown}
      '8': {name: punctuation.definition.link.markdown}
      '9': {name: string.other.link.description.title.markdown}
      '10': {name: punctuation.definition.string.markdown}
      '11': {name: punctuation.definition.string.markdown}
      '12': {name: string.other.link.description.title.markdown}
      '13': {name: punctuation.definition.string.markdown}
      '14': {name: punctuation.definition.string.markdown}
      '15': {name: string.other.link.description.title.markdown}
      '16': {name: punctuation.definition.string.markdown}
      '17': {name: punctuation.definition.string.markdown}
      '18': {name: punctuation.definition.metadata.markdown}

  image-ref:
    name: meta.image.reference.markdown
    match: (\!\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])[ ]?(\[)(.*?)(\])
    captures:
      '1': {name: punctuation.definition.string.begin.markdown}
      '2': {name: string.other.link.description.markdown}
      '4': {name: punctuation.definition.string.begin.markdown}
      '5': {name: punctuation.definition.constant.markdown}
      '6': {name: constant.other.reference.link.markdown}
      '7': {name: punctuation.definition.constant.markdown}

  inline:
    patterns:
    - include: '#ampersand'
    - include: '#bracket'
    - include: '#bold'
    - include: '#italic'
    - include: '#raw'
    - include: '#escape'
    - include: '#image-inline'
    - include: '#image-ref'
    - include: '#link-email'
    - include: '#link-inet'
    - include: '#link-inline'
    - include: '#link-ref'
    - include: '#link-ref-literal'
    - include: '#link-ref-shortcut'
    - include: '#astro-expressions'

  italic:
    name: markup.italic.markdown
    begin: |-
      (?x) (?<open>(\*(?=\w)|(?<!\w)\*|(?<!\w)\b_))(?=\S)                # Open
      (?=
        (
          <[^>]*+>              # HTML tags
          | (?<raw>`+)([^`]|(?!(?<!`)\k<raw>(?!`))`)*+\k<raw>
                            # Raw
          | \\[\\`*_{}\[\]()#.!+\->]?+      # Escapes
          | \[
          (
              (?<square>          # Named group
                [^\[\]\\]        # Match most chars
                | \\.            # Escaped chars
                | \[ \g<square>*+ \]    # Nested brackets
              )*+
            \]
            (
              (              # Reference Link
                [ ]?          # Optional space
                \[[^\]]*+\]        # Ref name
              )
              | (              # Inline Link
                \(            # Opening paren
                  [ \t]*+        # Optional whtiespace
                  <?(.*?)>?      # URL
                  [ \t]*+        # Optional whtiespace
                  (          # Optional Title
                    (?<title>['"])
                    (.*?)
                    \k<title>
                  )?
                \)
              )
            )
          )
          | \k<open>\k<open>                # Must be bold closer
          | (?!(?<=\S)\k<open>).            # Everything besides
                            # style closer
        )++
        (?<=\S)(?=_\b|\*)\k<open>                # Close
      )
    end: (?<=\S)(\1)((?!\1)|(?=\1\1))
    captures:
      '1': {name: punctuation.definition.italic.markdown}
    patterns:
    - begin: (?=<[^>]*?>)
      end: (?<=>)
      patterns:
      - include: text.html.astro
      applyEndPatternLast: 1
    - include: '#escape'
    - include: '#ampersand'
    - include: '#bracket'
    - include: '#raw'
    - include: '#bold'
    - include: '#image-inline'
    - include: '#link-inline'
    - include: '#link-inet'
    - include: '#link-email'
    - include: '#image-ref'
    - include: '#link-ref-literal'
    - include: '#link-ref'
    - include: '#link-ref-shortcut'

  link-def:
    name: meta.link.reference.def.markdown
    match: "(?x)\n\\s*            # Leading whitespace\n(\\[)([^]]+?)(\\])(:)    #\
      \ Reference name\n[ \\t]*          # Optional whitespace\n(<?)(\\S+?)(>?)  \
      \    # The url\n[ \\t]*          # Optional whitespace\n(?:\n    ((\\().+?(\\\
      )))    # Match title in parens\u2026\n  | ((\").+?(\"))    # or in double quotes\u2026\
      \n  | ((').+?('))    # or in single quotes.\n)?            # Title is optional\n\
      \\s*            # Optional whitespace\n$"
    captures:
      '1': {name: punctuation.definition.constant.markdown}
      '2': {name: constant.other.reference.link.markdown}
      '3': {name: punctuation.definition.constant.markdown}
      '4': {name: punctuation.separator.key-value.markdown}
      '5': {name: punctuation.definition.link.markdown}
      '6': {name: markup.underline.link.markdown}
      '7': {name: punctuation.definition.link.markdown}
      '8': {name: string.other.link.description.title.markdown}
      '9': {name: punctuation.definition.string.begin.markdown}
      '10': {name: punctuation.definition.string.end.markdown}
      '11': {name: string.other.link.description.title.markdown}
      '12': {name: punctuation.definition.string.begin.markdown}
      '13': {name: punctuation.definition.string.end.markdown}
      '14': {name: string.other.link.description.title.markdown}
      '15': {name: punctuation.definition.string.begin.markdown}
      '16': {name: punctuation.definition.string.end.markdown}

  link-email:
    name: meta.link.email.lt-gt.markdown
    match: (<)((?:mailto:)?[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*)(>)
    captures:
      '1': {name: punctuation.definition.link.markdown}
      '2': {name: markup.underline.link.markdown}
      '4': {name: punctuation.definition.link.markdown}

  link-inet:
    name: meta.link.inet.markdown
    match: (<)((?:https?|ftp)://.*?)(>)
    captures:
      '1': {name: punctuation.definition.link.markdown}
      '2': {name: markup.underline.link.markdown}
      '3': {name: punctuation.definition.link.markdown}

  link-inline:
    name: meta.link.inline.markdown
    match: "(?x)\n(\\[)((?<square>[^\\[\\]\\\\]|\\\\.|\\[\\g<square>*+\\])*+)(\\])\n\
      \              # Match the link text.\n(\\()            # Opening paren for\
      \ url\n  (<?)((?<url>(?>[^\\s()]+)|\\(\\g<url>*\\))*)(>?)      # The url\n \
      \ [ \\t]*          # Optional whitespace\n  (?:\n      ((\\().+?(\\)))    #\
      \ Match title in parens\u2026\n    | ((\").+?(\"))    # or in double quotes\u2026\
      \n    | ((').+?('))    # or in single quotes.\n  )?            # Title is optional\n\
      \  \\s*            # Optional whitespace\n(\\))"
    captures:
      '1': {name: punctuation.definition.string.begin.markdown}
      '2': {name: string.other.link.title.markdown}
      '4': {name: punctuation.definition.string.end.markdown}
      '5': {name: punctuation.definition.metadata.markdown}
      '6': {name: punctuation.definition.link.markdown}
      '7': {name: markup.underline.link.markdown}
      '9': {name: punctuation.definition.link.markdown}
      '10': {name: string.other.link.description.title.markdown}
      '11': {name: punctuation.definition.string.begin.markdown}
      '12': {name: punctuation.definition.string.end.markdown}
      '13': {name: string.other.link.description.title.markdown}
      '14': {name: punctuation.definition.string.begin.markdown}
      '15': {name: punctuation.definition.string.end.markdown}
      '16': {name: string.other.link.description.title.markdown}
      '17': {name: punctuation.definition.string.begin.markdown}
      '18': {name: punctuation.definition.string.end.markdown}
      '19': {name: punctuation.definition.metadata.markdown}

  link-ref:
    name: meta.link.reference.markdown
    match: (\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])(\[)([^\]]*+)(\])
    captures:
      '1': {name: punctuation.definition.string.begin.markdown}
      '2': {name: string.other.link.title.markdown}
      '4': {name: punctuation.definition.string.end.markdown}
      '5': {name: punctuation.definition.constant.begin.markdown}
      '6': {name: constant.other.reference.link.markdown}
      '7': {name: punctuation.definition.constant.end.markdown}

  link-ref-literal:
    name: meta.link.reference.literal.markdown
    match: (\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])[ ]?(\[)(\])
    captures:
      '1': {name: punctuation.definition.string.begin.markdown}
      '2': {name: string.other.link.title.markdown}
      '4': {name: punctuation.definition.string.end.markdown}
      '5': {name: punctuation.definition.constant.begin.markdown}
      '6': {name: punctuation.definition.constant.end.markdown}

  link-ref-shortcut:
    name: meta.link.reference.markdown
    match: (\[)(\S+?)(\])
    captures:
      '1': {name: punctuation.definition.string.begin.markdown}
      '2': {name: string.other.link.title.markdown}
      '3': {name: punctuation.definition.string.end.markdown}

  list_paragraph:
    name: meta.paragraph.markdown
    begin: (^|\G)(?=\S)(?![*+->]\s|[0-9]+\.\s)
    patterns:
    - include: '#inline'
    - include: text.html.astro
    - include: '#heading-setext'
    while: (^|\G)(?!\s*$|#|\s*([-*_>][ ]{2,}){3,}[ \t]*$\n?|\s*[*+->]|\s*[0-9]+\.)

  lists:
    patterns:
    - comment: Currently does not support un-indented second lines.
      name: markup.list.unnumbered.markdown
      begin: (^|\G)(\s*)([*+-])([ \t])
      beginCaptures:
        '3': {name: punctuation.definition.list.begin.markdown}
      patterns:
      - include: '#block'
      - include: '#list_paragraph'
      while: ((^|\G)([ ]{2,4}|\t))|(^[ \t]*$)
    - name: markup.list.numbered.markdown
      begin: (^|\G)(\s*)([0-9]+\.)([ \t])
      beginCaptures:
        '3': {name: punctuation.definition.list.begin.markdown}
      patterns:
      - include: '#block'
      - include: '#list_paragraph'
      while: ((^|\G)([ ]{2,4}|\t))|(^[ \t]*$)

  paragraph:
    name: meta.paragraph.markdown
    begin: (^|\G)\s*(?=\S)
    patterns:
    - include: '#inline'
    - include: text.html.astro
    - include: '#heading-setext'
    while: (^|\G)(?=\s*[-=]{3,}\s*$)

  raw:
    name: markup.inline.raw.string.markdown
    match: (`+)([^`]|(?!(?<!`)\1(?!`))`)*+(\1)
    captures:
      '1': {name: punctuation.definition.raw.markdown}
      '3': {name: punctuation.definition.raw.markdown}

  separator:
    name: meta.separator.markdown
    match: (^|\G)\s*([\*\-\_])([ ]{0,2}\2){2,}[ \t]*$\n?
$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
information_for_contributors:
- This file has been modified from https://github.com/microsoft/vscode-markdown-tm-grammar/commit/399ff6f608a7bef3f68713be23cdcb4c6d475804
